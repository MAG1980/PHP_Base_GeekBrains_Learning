//Включение xdebug в OpenServer 
В OpenServer открыть /Дополнительно/Конфигурация/PHP7_4
1) В Zend extensions снимаем комментарий со строки zend_extension = xdebug
2) Заменяем
xdebug.mode                      = off
на
xdebug.mode                      = develop

//Объявление констант

define('PI', 3.14); //присваивание значений происходит перед выполением программы
const PI = 3.14; //присваивание значений происходит в процессе выполнения программы
PI = 3.14; //Тоже применяется. Константы принято писать заглавными символами.

При попытке вывода несуществующей константы её название будет преобразовано в строку.

//Существуют предопределённые константы (глобальные?)

__LINE__, __FILE__, __FUNCTION__, __CLASS__, __METHOD__, __DIR__, PHP_VERSION, PHP_OS, PHP_EOL (end of line) 


/ - экранирование спецсимволов
В php бинарный плюс преобразует строку к числу.
(int) - преобразование к целому числу
(float) - преобразование к числу с плавающей точкой

При сложении int и float int будет приведён к float

<?php echo - <?=
`` - избегать использования. Позволяют выполнить код на сервере - это небезопасно!!!!!!!! 
'' - не работает парсинг переменных
"" - работает парсинг переменных
"{$x}" - правильный кодстайл для переменных в тексте

<<< - оператор потокового вывода
<pre> - представляет собой предварительно отформатированный текст, который должен быть представлен точно так, как написано в HTML-файле

//Вывод нескольких строк с помощью тега <pre>
<?php
echo "<pre>";
echo <<<HERE
Несколько
строк
HERE;

//Предпочтительный способ вывода нескольких строк с помощью тега <pre> - текст должен оставаться текстом.
<?php
$x=1;
echo "<pre>";
?>

Несколько
строк <?= $x ?>

is_null($x) - проверка на null
error_reporting(E_ALL) - вывод всех ошибок, в т.ч. Warning
error_reporting(E_ALL & !E_NOTICE) - вывод всех ошибок за исключением Warning


$a = (int)1; //явное указание типа переменной
$a = (float)1; //явное указание типа переменной

rand(1, 3) - выдаёт случайное число из указанного диапазона.

ДЗ:
Первый способ формирования страницы:
Вся логика работы программы располагается вверху файла, php-код до тега html.
В шаблоне HTML выводятся только готовые рассчитанные ранее величины.
Теги должны остаться в шаблоне.

Недостаток - пользователь может увидеть код.

Второй способ формирования страницы - способ активных шаблонов.
с помощью include
В index.php, в котором содержится вся логика работы сайта, включаем строки include "site.php", содержащие шаблон, в нужных местах.

Третий способ формирования страницы - способ пассивных шаблонов.
В шаблоне переменные представляют из себя обычный текст в фигурных скобках.
<h1>{{ x }}</h1>

$content = file_get_contents("https://ya.ru") //позволяет считать содержимое сайта в переменную.

//В нашем случае нужно считать файл HTML-шаблона в переменную и вывести с помощью echo.
//Перед этим заменим все текстовые вхождения "{{ x }}" на значения переменной $x
//с помощью функции str_replace()
$content = str_replace("{{ x }}", $x, $content)// где $content - всё содержимое шаблона. 
$content = file_get_contents("site.html");
echo $content;

Лекция №2
//Дурной тон - применение goto
a:
echo 1;
goto a;

Альтернативный синтаксис позволяет заменять управляющие конструкции в шаблоне html
else:

endif;

isset($x) - проверка на существование
